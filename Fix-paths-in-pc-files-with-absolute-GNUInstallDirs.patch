From cc272e7cdb1c06f4505a16eb6e0e3e3b890ac548 Mon Sep 17 00:00:00 2001
From: Jan Tojnar <jtojnar@gmail.com>
Date: Wed, 12 May 2021 10:22:27 +0200
Subject: [PATCH 1/2] build: Use CMAKE_INSTALL_INCLUDEDIR for finding headers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We already install headers to ${CMAKE_INSTALL_INCLUDEDIR}. Let’s also use that path in target properties so that the headers can be discovered when the option is changed to a non-standard location.

Signed-off-by: Jan Tojnar <jtojnar@gmail.com>
---
 python/rml/CMakeLists.txt          | 2 +-
 src/tbb/CMakeLists.txt             | 2 +-
 src/tbbbind/CMakeLists.txt         | 2 +-
 src/tbbmalloc/CMakeLists.txt       | 2 +-
 src/tbbmalloc_proxy/CMakeLists.txt | 2 +-
 test/CMakeLists.txt                | 2 +-
 6 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/python/rml/CMakeLists.txt b/python/rml/CMakeLists.txt
index 850b3b75..32c3c238 100644
--- a/python/rml/CMakeLists.txt
+++ b/python/rml/CMakeLists.txt
@@ -28,7 +28,7 @@ set_target_properties(irml PROPERTIES VERSION 1)
 target_include_directories(irml
     PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
+    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 target_compile_options(irml
     PRIVATE
diff --git a/src/tbb/CMakeLists.txt b/src/tbb/CMakeLists.txt
index c67b8bbe..dd17a426 100644
--- a/src/tbb/CMakeLists.txt
+++ b/src/tbb/CMakeLists.txt
@@ -66,7 +66,7 @@ endif()
 target_include_directories(tbb
     PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
+    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 target_compile_options(tbb
     PRIVATE
diff --git a/src/tbbbind/CMakeLists.txt b/src/tbbbind/CMakeLists.txt
index da9dabfe..95516972 100644
--- a/src/tbbbind/CMakeLists.txt
+++ b/src/tbbbind/CMakeLists.txt
@@ -34,7 +34,7 @@ function(tbbbind_build TBBBIND_NAME REQUIRED_HWLOC_TARGET)
     target_include_directories(${TBBBIND_NAME}
         PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-        $<INSTALL_INTERFACE:include>
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
         ${HWLOC_INCLUDE_DIRS} # pkg-config defined
     )
 
diff --git a/src/tbbmalloc/CMakeLists.txt b/src/tbbmalloc/CMakeLists.txt
index 7be183f1..42876485 100644
--- a/src/tbbmalloc/CMakeLists.txt
+++ b/src/tbbmalloc/CMakeLists.txt
@@ -39,7 +39,7 @@ endif()
 target_include_directories(tbbmalloc
     PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
+    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 # TODO: fix warnings
 if (MSVC)
diff --git a/src/tbbmalloc_proxy/CMakeLists.txt b/src/tbbmalloc_proxy/CMakeLists.txt
index 7503cd48..083d05eb 100644
--- a/src/tbbmalloc_proxy/CMakeLists.txt
+++ b/src/tbbmalloc_proxy/CMakeLists.txt
@@ -27,7 +27,7 @@ target_compile_definitions(tbbmalloc_proxy
 target_include_directories(tbbmalloc_proxy
     PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
+    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 if (NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
     # gcc 5.0 and later have -Wno-sized-deallocation options
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 842ebcba..d82ccef7 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -112,7 +112,7 @@ function(tbb_add_lib_test)
     target_include_directories(_${_tbb_test_NAME}
         PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
-        $<INSTALL_INTERFACE:include>
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
         PRIVATE
         ${CMAKE_CURRENT_SOURCE_DIR}/..
         ${CMAKE_CURRENT_SOURCE_DIR})

From 4c935dedc32af6c8fdf173e8df478d84459c3a79 Mon Sep 17 00:00:00 2001
From: Jan Tojnar <jtojnar@gmail.com>
Date: Wed, 12 May 2021 10:32:39 +0200
Subject: [PATCH 2/2] build: Fix paths in .pc file with absolute GNUInstallDirs

It is not generally true that `CMAKE_INSTALL_<dir>` variables are relative paths:

https://github.com/jtojnar/cmake-snips#concatenating-paths-when-building-pkg-config-files

Since older versions of CMake do not support joining paths, I added a custom function.
I am re-licensing the code under Apache-2.0 to match the tbb project license.

Signed-off-by: Jan Tojnar <jtojnar@gmail.com>
---
 cmake/JoinPaths.cmake            | 23 +++++++++++++++++++++++
 integration/pkg-config/tbb.pc.in |  4 ++--
 src/tbb/CMakeLists.txt           |  2 ++
 3 files changed, 27 insertions(+), 2 deletions(-)
 create mode 100644 cmake/JoinPaths.cmake

diff --git a/cmake/JoinPaths.cmake b/cmake/JoinPaths.cmake
new file mode 100644
index 00000000..c00fe462
--- /dev/null
+++ b/cmake/JoinPaths.cmake
@@ -0,0 +1,23 @@
+# This module provides function for joining paths
+# known from most languages
+#
+# SPDX-License-Identifier: (MIT OR CC0-1.0 OR Apache-2.0)
+# Copyright 2020 Jan Tojnar
+# https://github.com/jtojnar/cmake-snips
+#
+# Modelled after Python’s os.path.join
+# https://docs.python.org/3.7/library/os.path.html#os.path.join
+# Windows not supported
+function(join_paths joined_path first_path_segment)
+    set(temp_path "${first_path_segment}")
+    foreach(current_segment IN LISTS ARGN)
+        if(NOT ("${current_segment}" STREQUAL ""))
+            if(IS_ABSOLUTE "${current_segment}")
+                set(temp_path "${current_segment}")
+            else()
+                set(temp_path "${temp_path}/${current_segment}")
+            endif()
+        endif()
+    endforeach()
+    set(${joined_path} "${temp_path}" PARENT_SCOPE)
+endfunction()
diff --git a/integration/pkg-config/tbb.pc.in b/integration/pkg-config/tbb.pc.in
index 51e36f71..6008ecaf 100644
--- a/integration/pkg-config/tbb.pc.in
+++ b/integration/pkg-config/tbb.pc.in
@@ -14,8 +14,8 @@
 
 prefix=@CMAKE_INSTALL_PREFIX@
 exec_prefix=${prefix}
-libdir=${prefix}/@CMAKE_INSTALL_LIBDIR@
-includedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@
+libdir=@libdir_for_pc_file@
+includedir=@includedir_for_pc_file@
 
 Name: oneAPI Threading Building Blocks (oneTBB)
 Description: C++ library for parallel programming on multi-core processors.
diff --git a/src/tbb/CMakeLists.txt b/src/tbb/CMakeLists.txt
index dd17a426..581fbe9d 100644
--- a/src/tbb/CMakeLists.txt
+++ b/src/tbb/CMakeLists.txt
@@ -137,6 +137,8 @@ else()
     if (BUILD_TYPE STREQUAL "debug")
         set(TBB_LIB_NAME ${TBB_LIB_NAME}${CMAKE_DEBUG_POSTFIX})
     endif()
+    join_paths(libdir_for_pc_file "\${prefix}" "${CMAKE_INSTALL_LIBDIR}")
+    join_paths(includedir_for_pc_file "\${prefix}" "${CMAKE_INSTALL_INCLUDEDIR}")
     configure_file(${CMAKE_SOURCE_DIR}/integration/pkg-config/tbb.pc.in ${CMAKE_CURRENT_BINARY_DIR}/${TBB_LIB_NAME}.pc @ONLY)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${TBB_LIB_NAME}.pc
             DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
